entrypoints Program;
Progr. Program ::= [FunDeclaration] ;

comment "/*" "*/" ;
comment "//";

token CIdent (letter (letter | digit | '_')*) ;

SIf.           Stm ::= "[" "If" Exp [Stm] "]";
SIfElse.       Stm ::= "[" "If" Exp [Stm] "]" "[" "Else" [Stm] "]" ;
SJump.         Stm ::= Jump_stm ;
SExp.          Stm ::= Exp ;

separator Stm "" ;

SjumpReturn.      Jump_stm ::= "[" "Return" "]" ;
SjumpReturnV.     Jump_stm ::= "[" "Return" Exp "]" ;
SjumpBreak.       Jump_stm ::= "[" "Break" "]" ;
SjumpBreakV.      Jump_stm ::= "[" "Break" Exp "]" ;
SjumpContinue.    Jump_stm ::= "[" "Continue" "]";
SjumpContinueV.   Jump_stm ::= "[" "Continue" Exp "]" ;

ENone.          Exp ::= "[" "]";
EAsign.         Exp ::= "[" "Let" CIdent Exp "]";
EYield.         Exp ::= "[" "Yield" Exp "]" ;
ETrue.          Exp ::= "[" "True" "]" ;
EFalse.         Exp ::= "[" "False" "]" ;
EFor.           Exp ::= "[" "For" CIdent Exp Exp [Stm] "]" ;
EWhile.         Exp ::= "[" "While" Exp [Stm] "]" ;
EFunDef.        Exp ::= FunDeclaration ;
EInt.           Exp ::= Integer ;
EString.        Exp ::= String ;
EIdent.         Exp ::= CIdent ;
EFunPar.        Exp ::= "[" Exp [Exp] "]" ;

separator Exp "" ;

FunParam. FunParam ::= "@" CIdent ;
separator FunParam "" ;
FunDec. FunDeclaration ::= "[" "Def" CIdent [FunParam] [Stm] "]";
separator FunDeclaration "" ;
